<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/r/LocalLLaMA/.rss</id>
  <title>LocalLlama</title>
  <updated>2025-10-23T13:42:03+00:00</updated>
  <link href="https://old.reddit.com/r/LocalLLaMA/" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <icon>https://www.redditstatic.com/icon.png/</icon>
  <subtitle>Subreddit to discuss AI &amp; Llama, the large language model created by Meta AI.</subtitle>
  <entry>
    <id>t3_1od1hw4</id>
    <title>hey Z.ai, two weeks was yesterday</title>
    <updated>2025-10-22T07:13:00+00:00</updated>
    <author>
      <name>/u/jacek2023</name>
      <uri>https://old.reddit.com/user/jacek2023</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1od1hw4/hey_zai_two_weeks_was_yesterday/"&gt; &lt;img alt="hey Z.ai, two weeks was yesterday" src="https://preview.redd.it/lg6u60lj5mwf1.jpeg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=fb37b472c5a42bbe348ff5652a5ce811e269f95d" title="hey Z.ai, two weeks was yesterday" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/jacek2023"&gt; /u/jacek2023 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/lg6u60lj5mwf1.jpeg"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1od1hw4/hey_zai_two_weeks_was_yesterday/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1od1hw4/hey_zai_two_weeks_was_yesterday/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T07:13:00+00:00</published>
  </entry>
  <entry>
    <id>t3_1odnqga</id>
    <title>New 'Markovian Thinking' technique unlocks a path to million-token AI reasoning</title>
    <updated>2025-10-22T23:19:50+00:00</updated>
    <author>
      <name>/u/qzrz</name>
      <uri>https://old.reddit.com/user/qzrz</uri>
    </author>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/qzrz"&gt; /u/qzrz &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://venturebeat.com/ai/new-markovian-thinking-technique-unlocks-a-path-to-million-token-ai"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odnqga/new_markovian_thinking_technique_unlocks_a_path/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odnqga/new_markovian_thinking_technique_unlocks_a_path/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T23:19:50+00:00</published>
  </entry>
  <entry>
    <id>t3_1odf249</id>
    <title>Ling-1T is very impressive – why are there no independent benchmarks?</title>
    <updated>2025-10-22T17:40:56+00:00</updated>
    <author>
      <name>/u/Snail_Inference</name>
      <uri>https://old.reddit.com/user/Snail_Inference</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Today, I finally had the chance to run some tests with ubergarm’s GGUF version of Ling-1T: &lt;/p&gt; &lt;p&gt;&lt;a href="https://huggingface.co/ubergarm/Ling-1T-GGUF"&gt;Hugging Face – Ling-1T-GGUF&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I focused on mathematical and reasoning tasks, and I have to say: I’m genuinely impressed. I only used IQ2_K-quants and Ling-1T solved every problem I threw at it, while keeping costs low thanks to its minimal token usage.&lt;/p&gt; &lt;p&gt;But: I can’t find &lt;strong&gt;any&lt;/strong&gt; independent benchmarks. No results on Artificial Analysis, LiveBench, Aider’s LLM Leaderboard, EQ-Bench… nothing beyond anecdotal impressions. &lt;/p&gt; &lt;p&gt;What are your thoughts? Any ideas why this model seems to fly under the radar?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Snail_Inference"&gt; /u/Snail_Inference &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odf249/ling1t_is_very_impressive_why_are_there_no/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odf249/ling1t_is_very_impressive_why_are_there_no/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odf249/ling1t_is_very_impressive_why_are_there_no/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T17:40:56+00:00</published>
  </entry>
  <entry>
    <id>t3_1odyntn</id>
    <title>ContextGuard – Open-source security monitoring for MCP servers</title>
    <updated>2025-10-23T09:24:05+00:00</updated>
    <author>
      <name>/u/contextguard25</name>
      <uri>https://old.reddit.com/user/contextguard25</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odyntn/contextguard_opensource_security_monitoring_for/"&gt; &lt;img alt="ContextGuard – Open-source security monitoring for MCP servers" src="https://external-preview.redd.it/NdcfeyZayLXcbEcm5eWMZrpKz2QCwWR_zxWaOc_QgYg.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=e48558a693b5cdf585a1ccb581ebe6b5a987f813" title="ContextGuard – Open-source security monitoring for MCP servers" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I built ContextGuard after discovering that 43% of MCP servers have critical security vulnerabilities. MCP (Model Context Protocol) is the new standard that lets Claude Clients(Desktop, Windsurf, Cursor, etc.) access external tools and data sources - think of it as a plugin system for AI assistants.&lt;/p&gt; &lt;p&gt;The problem: When you give those clients access to your filesystem, databases, or APIs through MCP servers, you're opening up serious attack vectors. Prompt injection, data leakage, and path traversal attacks are all possible. Most developers building MCP servers don't have security expertise, and there wasn't an easy way to add protection.&lt;/p&gt; &lt;p&gt;What ContextGuard does:&lt;/p&gt; &lt;p&gt;- Wraps your MCP server as a transparent security proxy&lt;/p&gt; &lt;p&gt;- Detects 8+ prompt injection patterns in real-time&lt;/p&gt; &lt;p&gt;- Scans for sensitive data (API keys, passwords, SSNs) in responses&lt;/p&gt; &lt;p&gt;- Prevents path traversal attacks&lt;/p&gt; &lt;p&gt;- Rate limiting to prevent abuse&lt;/p&gt; &lt;p&gt;- Comprehensive JSON logging for auditing&lt;/p&gt; &lt;p&gt;- &amp;lt;1% performance overhead&lt;/p&gt; &lt;p&gt;Technical approach:&lt;/p&gt; &lt;p&gt;- TypeScript-based stdio proxy&lt;/p&gt; &lt;p&gt;- Pattern matching + heuristics for threat detection&lt;/p&gt; &lt;p&gt;- Works with any MCP server using stdio transport&lt;/p&gt; &lt;p&gt;- Zero code changes needed - just wrap your existing server&lt;/p&gt; &lt;p&gt;- All detection happens synchronously in the request/response flow&lt;/p&gt; &lt;p&gt;The README includes a testing section where you can see the same attacks succeed on an unprotected server vs being blocked with ContextGuard enabled. It's pretty eye-opening to see how easy these attacks are.&lt;/p&gt; &lt;p&gt;Why open source:&lt;/p&gt; &lt;p&gt;Security tools need transparency. I want the community to audit the detection patterns, contribute new ones, and help identify blind spots. Plus, MCP is still early days - we need to establish security best practices together.&lt;/p&gt; &lt;p&gt;Roadmap:&lt;/p&gt; &lt;p&gt;Currently working on SSE/HTTP transport support, a web dashboard for monitoring, and a custom rule engine. Planning to offer Pro features for enterprises (team management, priority support, advanced analytics) while keeping the core security features free and open source forever.&lt;/p&gt; &lt;p&gt;I'd love feedback on:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;What other attack patterns should I prioritize detecting?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Is the web dashboard a must-have or nice-to-have?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Any blind spots in the current detection logic?&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Should I focus more on detection accuracy or performance?&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The project is on GitHub with full docs and examples: &lt;a href="https://github.com/amironi/contextguard"&gt;https://github.com/amironi/contextguard&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You can try it right now:&lt;/p&gt; &lt;p&gt;npm install -g contextguard&lt;/p&gt; &lt;p&gt;contextguard --server &amp;quot;node your-mcp-server.js&amp;quot;&lt;/p&gt; &lt;p&gt;Happy to answer any questions!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/contextguard25"&gt; /u/contextguard25 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/amironi/contextguard"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odyntn/contextguard_opensource_security_monitoring_for/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odyntn/contextguard_opensource_security_monitoring_for/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T09:24:05+00:00</published>
  </entry>
  <entry>
    <id>t3_1odw2fs</id>
    <title>I’ve open-sourced part of my BrainAPI project! tackling AI memory, hallucination, and search grounding</title>
    <updated>2025-10-23T06:33:14+00:00</updated>
    <author>
      <name>/u/shbong</name>
      <uri>https://old.reddit.com/user/shbong</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;One of the biggest challenges with current LLMs and &amp;quot;agents&amp;quot; isn’t just generating text.. it’s remembering, reasoning, and verifying what’s true.&lt;br /&gt; Models can sound smart, but when it comes to consistent memory and accurate retrieval, they often fall apart.&lt;/p&gt; &lt;p&gt;That’s what I’m working on with BrainAPI.&lt;br /&gt; The idea is to go beyond just vector search or RAG and build a real memory architecture that allows agents to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;track down information clearly and contextually&lt;/li&gt; &lt;li&gt;cross-check knowledge over time&lt;/li&gt; &lt;li&gt;reduce hallucination by connecting to factual sources&lt;/li&gt; &lt;li&gt;and perform fast, structured, grounded searches&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I see &amp;quot;memory&amp;quot; as more than just storing past messages, it’s about building a long-term cognitive layer where information lives, evolves, and connects.&lt;/p&gt; &lt;p&gt;I'd love to make that foundation open, composable, and agent-friendly something that any AI system can plug into to gain reliable recall, better reasoning, and true continuity.&lt;/p&gt; &lt;p&gt;I’ve open-sourced one of the core repos here if you want to explore or contribute:&lt;br /&gt; &lt;a href="https://github.com/Lumen-Labs/brainapi"&gt;https://github.com/Lumen-Labs/brainapi&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Curious how others here think about this!&lt;br /&gt; How do you see the future of agent memory and information grounding evolving?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/shbong"&gt; /u/shbong &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odw2fs/ive_opensourced_part_of_my_brainapi_project/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odw2fs/ive_opensourced_part_of_my_brainapi_project/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odw2fs/ive_opensourced_part_of_my_brainapi_project/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T06:33:14+00:00</published>
  </entry>
  <entry>
    <id>t3_1odz82k</id>
    <title>How can I run any of the recently released OCR models on an AMD APU?</title>
    <updated>2025-10-23T09:59:49+00:00</updated>
    <author>
      <name>/u/SarcasticBaka</name>
      <uri>https://old.reddit.com/user/SarcasticBaka</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hey guys, I have a project in mind which would require OCRing thousands of scanned PDFs and converting them into markdown, as such I've been keeping an eye on all the new recent OCR models such as Nanonets, Paddle-VL, Deepseek OCR, etc.&lt;br /&gt; My issue is that all these models seem to require either PYTORCH or VLLM with CUDA to run, and I only have a modest Radeon 780M integrated GPU which isn't even officially supported by ROCm at the moment with 32 gigs of unified RAM. So far all the models I've been able to run were on LMStudio and LLama.cpp using the Vulkan backend. &lt;/p&gt; &lt;p&gt;So is there any way I could run any of these models on my hardware?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/SarcasticBaka"&gt; /u/SarcasticBaka &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odz82k/how_can_i_run_any_of_the_recently_released_ocr/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odz82k/how_can_i_run_any_of_the_recently_released_ocr/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odz82k/how_can_i_run_any_of_the_recently_released_ocr/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T09:59:49+00:00</published>
  </entry>
  <entry>
    <id>t3_1oe1nak</id>
    <title>Flying octopus?</title>
    <updated>2025-10-23T12:14:13+00:00</updated>
    <author>
      <name>/u/Federal-Minute5809</name>
      <uri>https://old.reddit.com/user/Federal-Minute5809</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe1nak/flying_octopus/"&gt; &lt;img alt="Flying octopus?" src="https://preview.redd.it/xe92huj7suwf1.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=9890acf7ad3c35dd2b60812c9e3d2c34530faec0" title="Flying octopus?" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;What model is this?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Federal-Minute5809"&gt; /u/Federal-Minute5809 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/xe92huj7suwf1.png"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe1nak/flying_octopus/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1oe1nak/flying_octopus/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T12:14:13+00:00</published>
  </entry>
  <entry>
    <id>t3_1odgyxp</id>
    <title>I Asked Grok, Claude, ChatGPT, and Google to Fix My Code (Are we really doomed?)</title>
    <updated>2025-10-22T18:51:11+00:00</updated>
    <author>
      <name>/u/FPham</name>
      <uri>https://old.reddit.com/user/FPham</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;So yesterday I spent about 3 hours on an existing project, throwing it at Grok, Claude, and Google AI. Not something huge, About 3 pairs of reasonably sized cpp/h files, nothing too flashy, rather tight coding.&lt;br /&gt; It’s a painting editor drop in — sort of a Photoshop-ish thing (complete with multi-undo, image based brushes and all that crap).&lt;/p&gt; &lt;p&gt;I still have the old code, I plan to throw it at Qwen, Deepseek, etc next.&lt;br /&gt; Edit: See bottom of the post for updates.&lt;/p&gt; &lt;p&gt;I noticed the zoom in/out was chaotic. It was supposed to zoom around the cursor when using zoomat(x,y), but instead, it was jumping all over the place.&lt;/p&gt; &lt;p&gt;So first, Grok. It noticed I did GDI+ dynamically and told me there’s no reason for that. The rewrite it came up with to “fix” my issue was a disaster — after multiple back-and-forths, it just kept getting worse. Also, Grok’s tendency to randomly change and add lot of code didn’t help. Hahaha. Reverted back to my original code. Jumpy but at least image was always visible on screen, unlike Grok's code where the image could go entirely outside the viewport.&lt;/p&gt; &lt;p&gt;ChatGPT — not enough tokens to feed entire code on my tier, so ignored for now.&lt;/p&gt; &lt;p&gt;Google AI… now that one has this funny habit of always agreeing with you. It just keeps spitting out the same code and saying, &lt;em&gt;“Now it’s perfectly fixed, this is the final version, I swear on Larry Page, I found the problem!”&lt;/em&gt; No, it didn’t.&lt;br /&gt; To be fair, it was poking in the right places and found the functions that likely needed changing, but the result was still wrong. Again, the problem got even worse. It seems that if it doesn't know it kind of starts just shuffling code around without any real changes.&lt;/p&gt; &lt;p&gt;Claude - same issue, rewrote the code multiple times, finding the bug, never found it. But then I asked if maybe I was mixing up coordinates, and boom — Claude immediately said, yep, you’re mixing local and screen coordinates. (didn't you notice that before?) And indeed, that was the broad culprit.&lt;br /&gt; Its fix then was halfway there — zoom in worked, but zoom out… the moment the image fit in the viewport, it started pushing everything to the bottom-right. (That's a new one!) Blah, blah, blah, couldn’t find the issue.&lt;/p&gt; &lt;p&gt;So I threw in the towel and looked at the code myself. It missed that the offset was based on the &lt;strong&gt;image center&lt;/strong&gt;. It was calculating the offset from the top-left corner — and the funny thing is, all the relevant code was &lt;em&gt;right there&lt;/em&gt; in front . I literally gave it everything. In fact the original code was clearly zeroing it to center it, but Claude assumed it must be wrong!&lt;/p&gt; &lt;p&gt;Summary: Claude eventually found my local/screen coordinate mix-up (the reason zooming jumped all over the place — the functions themselves were fine, just working with the wrong coordinates), but it didn't figure out the display logic. The offset was from the image center — zero means centered. I assume if I nudged Grok and google right direction, they could eventually find the coordinates issue too. (It actually didn't occurred to me that coordinates mixup was the cause, until after I thought about it...)&lt;/p&gt; &lt;p&gt;Here’s the current state of AI programming with the big boys, in practice:&lt;/p&gt; &lt;p&gt;There’s no way someone who doesn’t already know a thing or two about the project — and general graphics programming — could fix this with AI right now. On their own, all the AIs kept diverging from the right fix, touching half the codebase, when the real fix was just about four lines total.&lt;br /&gt; (correct the screen-to-image coordinates, and when the image fits in the viewport, set the offset to zero — not &lt;code&gt;(viewport - image)/2&lt;/code&gt;, even though the original code has it zeroed - that's introducing a bug!!!)&lt;/p&gt; &lt;p&gt;Still, AI programming is a big WOW to me. But after 25 years of graphics programming, yeah… that still matters (for now) when things go pear-shaped like this.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;:&lt;br /&gt; Tried Deepseek. The good part, found the error at first try without detours!&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&amp;quot;Looking at your zoom implementation, I can see the issue. The problem is in the &lt;code&gt;zoomAt&lt;/code&gt; method in &lt;code&gt;Canvas.h&lt;/code&gt; - there's a mismatch between the coordinate systems being used.&lt;/p&gt; &lt;p&gt;In &lt;code&gt;CPaintWnd::OnMouseWheel&lt;/code&gt;, you're passing screen coordinates (&lt;code&gt;pt.x, pt.y&lt;/code&gt;) to &lt;code&gt;zoomAt&amp;quot;&lt;/code&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;That is correct&lt;br /&gt; The slightly bad part: the fix was actually not exactly correct, it didn't correctly figured out which way the screen to local should go - but that would be an easy catch for me normally.&lt;br /&gt; When I prompt it to recheck the calculation, it corrected itself noticing how the screen to client is calculated elsewhere. So good point!&lt;/p&gt; &lt;p&gt;Bad part 2: Just like Claude, inexplicably introduced error down the code. It changed the offset from the original (correct) to wrong. The exact same error Claude did. (Great minds think alike?)&lt;br /&gt; Now even after multiple tries, short of giving it the answer, it could not figure out that part why it changed a working code to non working (it was doing the same as Claude version, zooming out would push the image right bottom)&lt;/p&gt; &lt;p&gt;So in summary 2: DeepSeek in this case performed slightly better than Claude, figuring out the culprit in words (but not in code) at first try. But both introduced a new error.&lt;/p&gt; &lt;p&gt;None of them did however what a proper programmer should do.&lt;br /&gt; Even the correct fix should not be to turn the zoomAt function from canvas class coordinates to viewport coordinates, just to make it work) after all as it is illogical since every other function in canvas class work in canvas coordinates, but simply go back where this code is called from (MouseWheel) and add viewport to canvas translation at that level.&lt;br /&gt; So even a correct fix introduces a bad code. Again win for human programmer. &lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/FPham"&gt; /u/FPham &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odgyxp/i_asked_grok_claude_chatgpt_and_google_to_fix_my/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odgyxp/i_asked_grok_claude_chatgpt_and_google_to_fix_my/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odgyxp/i_asked_grok_claude_chatgpt_and_google_to_fix_my/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T18:51:11+00:00</published>
  </entry>
  <entry>
    <id>t3_1odvxxa</id>
    <title>what are the best models for code generation right now??</title>
    <updated>2025-10-23T06:25:09+00:00</updated>
    <author>
      <name>/u/lavangamm</name>
      <uri>https://old.reddit.com/user/lavangamm</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hey!! recently a lot of new models have been released and I wanted to know which ones are the best for coding. I’ve heard that sonnet 4.5 and GLM 4.5 are really good, but I’m curious if there are any other models that perform well in different areas, such as frontend design, software architecture, or other coding dimensions. I’m open to both open-source and closed-source models. rn trying to use models that are available on bedrock&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/lavangamm"&gt; /u/lavangamm &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odvxxa/what_are_the_best_models_for_code_generation/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odvxxa/what_are_the_best_models_for_code_generation/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odvxxa/what_are_the_best_models_for_code_generation/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T06:25:09+00:00</published>
  </entry>
  <entry>
    <id>t3_1odwqul</id>
    <title>HOWTO Mi50 + llama.cpp + ROCM 7.02</title>
    <updated>2025-10-23T07:17:35+00:00</updated>
    <author>
      <name>/u/Low-Situation-7558</name>
      <uri>https://old.reddit.com/user/Low-Situation-7558</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hello everyone!&lt;/p&gt; &lt;p&gt;First off, my apologies – English is not my native language, so I've used a translator to write this guide.&lt;/p&gt; &lt;p&gt;I'm a complete beginner at running LLMs and really wanted to try running an LLM locally. I bought an MI50 32GB card and had an old server lying around.&lt;/p&gt; &lt;p&gt;Hardware:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Supermicro X12SPL-F&lt;/li&gt; &lt;li&gt;Intel(R) Xeon(R) Gold 5315Y CPU @ 3.20GHz&lt;/li&gt; &lt;li&gt;2x DIMM 128GB 3200MHz&lt;/li&gt; &lt;li&gt;2x NVME Micron 5300 1.92TB&lt;/li&gt; &lt;li&gt;1x AMD Radeon Instinct MI50 32GB&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I used bare metal with Ubuntu 22.04 Desktop as the OS.&lt;/p&gt; &lt;p&gt;The problems started right away:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;The card was detected but wouldn't work with ROCm – the issue was the BIOS settings. Disabling CSM Support did the trick.&lt;/li&gt; &lt;li&gt;Then I discovered the card was running at PCI-E 3.0. I flashed the vbios2 using this &lt;a href="https://gist.github.com/evilJazz/14a4c82a67f2c52a6bb5f9cea02f5e13"&gt;excellent guide&lt;/a&gt;&lt;/li&gt; &lt;li&gt;I installed ROCm 6.3.3 using the official guide and then Ollama – but Ollama didn't use the GPU, only the CPU. It turns out support for GFX906 (AMD Mi50) was dropped in Ollama, and the last version supporting this card is v0.12.3.&lt;/li&gt; &lt;li&gt;I wasn't very impressed with Ollama, so I found a &lt;a href="https://github.com/iacopPBK/llama.cpp-gfx906"&gt;llama.cpp fork with optimisation for Mi50&lt;/a&gt; and used that. However, with ROCm versions newer than 6.3.3, llama.cpp complained about missing TensileLibrary files. In the end, I managed to build those libraries and got everything working.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;So, I ended up with a small setup guide, thanks to the community, and I decided to share it.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;### ROCM 7.0.2 install wget https://repo.radeon.com/amdgpu-install/7.0.2/ubuntu/jammy/amdgpu-install_7.0.2.70002-1_all.deb sudo apt install ./amdgpu-install_7.0.2.70002-1_all.deb sudo apt update sudo apt install python3-setuptools python3-wheel sudo usermod -a -G render,video $LOGNAME # Add the current user to the render and video groups sudo apt install rocm ### AMD driver install sudo apt install &amp;quot;linux-headers-$(uname -r)&amp;quot; &amp;quot;linux-modules-extra-$(uname -r)&amp;quot; sudo apt install amdgpu-dkms ### Install packages for build sudo apt install libmpack-dev libmsgpack-dev build-essential cmake curl libcurl4-openssl-dev git python3.10-venv -y ### Build TensileLibrary for GFX906 git clone https://github.com/ROCm/rocBLAS.git cd rocBLAS/ sudo cmake -DCMAKE_CXX_COMPILER=amdclang++ -DGPU_TARGETS=gfx906 -DCMAKE_INSTALL_PREFIX=/opt/rocm-7.0.2/lib/rocblas/library/ sudo make install ### Build llama.cpp-gfx906 git clone https://github.com/iacopPBK/llama.cpp-gfx906.git cd llama.cpp-gfx906/ chmod +x ./SCRIPT_compile_MI50.sh ./SCRIPT_compile_MI50.sh &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can run llama.cpp with GFX906 support and ROCm 7.0.2.&lt;/p&gt; &lt;p&gt;My method is probably not the best one, but it's relatively straightforward to get things working. If you have any better setup suggestions, I'd be very grateful if you could share them!&lt;/p&gt; &lt;p&gt;P.S. I also found a wonderful repository with &lt;a href="https://github.com/mixa3607/ML-gfx906"&gt;Docker images&lt;/a&gt;, but I couldn't get it to run. The author seems to run it within Kubernetes, from what I can tell.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Low-Situation-7558"&gt; /u/Low-Situation-7558 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odwqul/howto_mi50_llamacpp_rocm_702/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odwqul/howto_mi50_llamacpp_rocm_702/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odwqul/howto_mi50_llamacpp_rocm_702/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T07:17:35+00:00</published>
  </entry>
  <entry>
    <id>t3_1oe2hcz</id>
    <title>Chonky – a neural text semantic chunking goes multilingual</title>
    <updated>2025-10-23T12:53:33+00:00</updated>
    <author>
      <name>/u/SpiritedTrip</name>
      <uri>https://old.reddit.com/user/SpiritedTrip</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe2hcz/chonky_a_neural_text_semantic_chunking_goes/"&gt; &lt;img alt="Chonky – a neural text semantic chunking goes multilingual" src="https://external-preview.redd.it/R9pXizXwmsq86RnZBOCfLWKzscfMTo1VbA_2_H6QLnc.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=6c8c92e6e7b529145355f1b223eceadca90042f4" title="Chonky – a neural text semantic chunking goes multilingual" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;TLDR: I’m expanding the family of text-splitting Chonky models with new multilingual model: &lt;a href="https://huggingface.co/mirth/chonky_mmbert_small_multilingual_1"&gt;https://huggingface.co/mirth/chonky_mmbert_small_multilingual_1&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You can learn more about this neural approach in a previous post: &lt;a href="https://www.reddit.com/r/LocalLLaMA/comments/1jxg66a/chonky_a_neural_approach_for_semantic_text/"&gt;https://www.reddit.com/r/LocalLLaMA/comments/1jxg66a/chonky_a_neural_approach_for_semantic_text/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Since the release of the first distilbert-based model I’ve released two more models based on a ModernBERT. All these models were pre-trained and fine-tuned primary on English texts.&lt;/p&gt; &lt;p&gt;But recently mmBERT(&lt;a href="https://huggingface.co/blog/mmbert"&gt;https://huggingface.co/blog/mmbert&lt;/a&gt;) has been released. This model pre-trained on massive dataset that contains 1833 languages. So I had an idea of fine-tuning a new multilingual Chonky model.&lt;/p&gt; &lt;p&gt;I’ve expanded training dataset (that previously contained bookcorpus and minipile datasets) with Project Gutenberg dataset which contains books in some widespread languages.&lt;/p&gt; &lt;p&gt;To make the model more robust for real-world data I’ve removed punctuation for last word for every training chunk with probability of 0.15 (no ablation was made for this technique though).&lt;/p&gt; &lt;p&gt;The hard part is evaluation. The real-world data are typically OCR'ed markdown, transcripts of calls, meeting notes etc. and not a clean book paragraphs. I didn’t find such labeled datasets. So I used what I had: already mentioned bookcorpus and Project Gutenberg validation, Paul Graham essays, concatenated 20_newsgroups.&lt;/p&gt; &lt;p&gt;I also tried to fine-tune the bigger mmBERT model (mmbert-base) but unfortunately it didn’t go well — metrics are weirdly lower in comparison with a small model.&lt;/p&gt; &lt;p&gt;Please give it a try. I'll appreciate a feedback.&lt;/p&gt; &lt;p&gt;The new multilingual model: &lt;a href="https://huggingface.co/mirth/chonky_mmbert_small_multilingual_1"&gt;https://huggingface.co/mirth/chonky_mmbert_small_multilingual_1&lt;/a&gt;&lt;/p&gt; &lt;p&gt;All the Chonky models: &lt;a href="https://huggingface.co/mirth"&gt;https://huggingface.co/mirth&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Chonky wrapper library: &lt;a href="https://github.com/mirth/chonky"&gt;https://github.com/mirth/chonky&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/SpiritedTrip"&gt; /u/SpiritedTrip &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/mirth/chonky"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe2hcz/chonky_a_neural_text_semantic_chunking_goes/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1oe2hcz/chonky_a_neural_text_semantic_chunking_goes/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T12:53:33+00:00</published>
  </entry>
  <entry>
    <id>t3_1od8fz0</id>
    <title>YES! Super 80b for 8gb VRAM - Qwen3-Next-80B-A3B-Instruct-GGUF</title>
    <updated>2025-10-22T13:34:41+00:00</updated>
    <author>
      <name>/u/Mangleus</name>
      <uri>https://old.reddit.com/user/Mangleus</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;So amazing to be able to run this beast on a 8GB VRAM laptop &lt;a href="https://huggingface.co/lefromage/Qwen3-Next-80B-A3B-Instruct-GGUF"&gt;https://huggingface.co/lefromage/Qwen3-Next-80B-A3B-Instruct-GGUF&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Note that this is not yet supported by latest llama.cpp so you need to compile the non-official version as shown in the link above. (Do not forget to add GPU support when compiling). &lt;/p&gt; &lt;p&gt;Have fun! &lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Mangleus"&gt; /u/Mangleus &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1od8fz0/yes_super_80b_for_8gb_vram/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1od8fz0/yes_super_80b_for_8gb_vram/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1od8fz0/yes_super_80b_for_8gb_vram/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T13:34:41+00:00</published>
  </entry>
  <entry>
    <id>t3_1odg6pz</id>
    <title>olmoOCR 2 released, big quality improvements, fully open training data and code</title>
    <updated>2025-10-22T18:22:09+00:00</updated>
    <author>
      <name>/u/whistling_frank</name>
      <uri>https://old.reddit.com/user/whistling_frank</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odg6pz/olmoocr_2_released_big_quality_improvements_fully/"&gt; &lt;img alt="olmoOCR 2 released, big quality improvements, fully open training data and code" src="https://external-preview.redd.it/jMHnzDUDDsA1xIrP_vxD1Z6TLTLk5mgpCRd-v7PwCn4.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=60397e0ca48d71f38e4f50d1bb3a4a5210618f9a" title="olmoOCR 2 released, big quality improvements, fully open training data and code" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Given the interest in OCR models recently, Ai2's release today should be on your radar. The weights, training data, and training code are all open, and you can try it for free here:&lt;br /&gt; &lt;a href="https://olmocr.allenai.org/"&gt;https://olmocr.allenai.org/&lt;/a&gt; &lt;/p&gt; &lt;p&gt;📚 Blog: &lt;a href="https://allenai.org/blog/olmocr-2"&gt;https://allenai.org/blog/olmocr-2&lt;/a&gt;&lt;/p&gt; &lt;p&gt;💻 Model: &lt;a href="https://huggingface.co/allenai/olmOCR-2-7B-1025-FP8"&gt;https://huggingface.co/allenai/olmOCR-2-7B-1025-FP8&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/whistling_frank"&gt; /u/whistling_frank &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://allenai.org/blog/olmocr-2"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odg6pz/olmoocr_2_released_big_quality_improvements_fully/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odg6pz/olmoocr_2_released_big_quality_improvements_fully/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T18:22:09+00:00</published>
  </entry>
  <entry>
    <id>t3_1odwj89</id>
    <title>Qwen3 Next 80B A3B Instruct on RTX 5090</title>
    <updated>2025-10-23T07:03:34+00:00</updated>
    <author>
      <name>/u/lkarlslund</name>
      <uri>https://old.reddit.com/user/lkarlslund</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;With latest patches you can run the Q2 on 32GB VRAM with 50K context size. Here's how:&lt;/p&gt; &lt;p&gt;Assuming you're running Linux, and have required dev tools installed:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/cturan/llama.cpp.git llama.cpp-qwen3-next cd llama.cpp-qwen3-next git checkout qwen3_next time cmake -B build -DGGML_CUDA=ONgit clone https://github.com/cturan/llama.cpp.git llama.cpp-qwen3-next cd llama.cpp-qwen3-next git checkout qwen3_next time cmake -B build -DGGML_CUDA=ON time cmake --build build --config Release --parallel $(nproc --all) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Grab the model from HuggingFace:&lt;/p&gt; &lt;p&gt;&lt;a href="https://huggingface.co/lefromage/Qwen3-Next-80B-A3B-Instruct-GGUF/tree/main"&gt;https://huggingface.co/lefromage/Qwen3-Next-80B-A3B-Instruct-GGUF/tree/main&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If all of that went according to plan, launch it with:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;build/bin/llama-server -m \~/models/lefromage/Qwen3-Next-80B-A3B-Instruct-GGUF/Qwen\_\_Qwen3-Next-80B-A3B-Instruct-Q2\_K.gguf --port 5005 --no-mmap -ngl 999 --ctx-size 50000 -fa on &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That gives me around 600t/s for prompt parsing and 50-60t/s for generation.&lt;/p&gt; &lt;p&gt;You can also run Q4 with partial CUDA offload, adjust -ngl 30 or whatever VRAM you have available. The performance is not great though.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/lkarlslund"&gt; /u/lkarlslund &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odwj89/qwen3_next_80b_a3b_instruct_on_rtx_5090/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odwj89/qwen3_next_80b_a3b_instruct_on_rtx_5090/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odwj89/qwen3_next_80b_a3b_instruct_on_rtx_5090/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T07:03:34+00:00</published>
  </entry>
  <entry>
    <id>t3_1odystc</id>
    <title>Hierarchical Agentic RAG: What are your thoughts?</title>
    <updated>2025-10-23T09:33:14+00:00</updated>
    <author>
      <name>/u/Just-Message-9899</name>
      <uri>https://old.reddit.com/user/Just-Message-9899</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odystc/hierarchical_agentic_rag_what_are_your_thoughts/"&gt; &lt;img alt="Hierarchical Agentic RAG: What are your thoughts?" src="https://preview.redd.it/co0m6q6hztwf1.jpeg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=67cb6fa342de397bddd954c1f689d7420df2c28f" title="Hierarchical Agentic RAG: What are your thoughts?" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi everyone,&lt;/p&gt; &lt;p&gt;While exploring techniques to optimize Retrieval-Augmented Generation (RAG) systems, I found the concept of Hierarchical RAG (sometimes called &amp;quot;Parent Document Retriever&amp;quot; or similar).&lt;/p&gt; &lt;p&gt;Essentially, I've seen implementations that use a hierarchical chunking strategy where: 1. Child chunks (smaller, denser) are created and used as retrieval anchors (for vector search). 2. Once the most relevant child chunks are identified, their larger &amp;quot;parent&amp;quot; text portions (which contain more context) are retrieved to be used as context for the LLM.&lt;/p&gt; &lt;p&gt;The idea is that the small chunks improve retrieval precision (reducing &amp;quot;lost in the middle&amp;quot; and semantic drift), while the large chunks provide the LLM with the full context needed for more accurate and coherent answers.&lt;/p&gt; &lt;p&gt;What are your thoughts on this technique? Do you have any direct experience with it?&lt;br /&gt; Do you find it to be one of the best strategies for balancing retrieval precision and context richness?&lt;br /&gt; Are there better/more advanced RAG techniques (perhaps &amp;quot;Agentic RAG&amp;quot; or other routing/optimization strategies) that you prefer?&lt;/p&gt; &lt;p&gt;I found an implementation on GitHub that explains the concept well and offers a practical example. It seems like a good starting point to test the validity of the approach. &lt;/p&gt; &lt;p&gt;Link to the repository: &lt;a href="https://github.com/GiovanniPasq/agentic-rag-for-dummies"&gt;https://github.com/GiovanniPasq/agentic-rag-for-dummies&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Just-Message-9899"&gt; /u/Just-Message-9899 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/co0m6q6hztwf1.jpeg"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odystc/hierarchical_agentic_rag_what_are_your_thoughts/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odystc/hierarchical_agentic_rag_what_are_your_thoughts/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T09:33:14+00:00</published>
  </entry>
  <entry>
    <id>t3_1oe2him</id>
    <title>Pokee AI - Opensource 7B model for deep research</title>
    <updated>2025-10-23T12:53:44+00:00</updated>
    <author>
      <name>/u/previse_je_sranje</name>
      <uri>https://old.reddit.com/user/previse_je_sranje</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I asked it to give me Universities that fit specific criteria. 30 min later it produced a report with sources and really emphasized on verifying my criteria was met. It doesn't feel like just a 7B model, it's pretty good.. or maybe 7B models got too good :D?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/previse_je_sranje"&gt; /u/previse_je_sranje &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://x.com/Pokee_AI/status/1981040897346179256"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe2him/pokee_ai_opensource_7b_model_for_deep_research/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1oe2him/pokee_ai_opensource_7b_model_for_deep_research/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T12:53:44+00:00</published>
  </entry>
  <entry>
    <id>t3_1odk11r</id>
    <title>Strix Halo vs DGX Spark - Initial Impressions (long post with TL;DR at the end)</title>
    <updated>2025-10-22T20:46:12+00:00</updated>
    <author>
      <name>/u/Eugr</name>
      <uri>https://old.reddit.com/user/Eugr</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;There are a lot of separate posts about Strix Halo and DGX Spark, but not too many direct comparisons from the people who are actually going to use them for work.&lt;/p&gt; &lt;p&gt;So, after getting Strix Halo and later DGX Spark, decided to compile my initial impressions after using both Strix Halo (GMKTek Evo x2 128GB) and NVidia DGX Spark as an AI developer, in case it would be useful to someone.&lt;/p&gt; &lt;h1&gt;Hardware&lt;/h1&gt; &lt;p&gt;DGX Spark is probably the most minimalist mini-PC I've ever used. &lt;/p&gt; &lt;p&gt;It has absolutely no LEDs, not even in the LAN port, and on/off switch is a button, so unless you ping it over the network or hook up a display, good luck guessing if this thing is on. All ports are in the back, there is no Display Port, only a single HDMI port, USB-C (power only), 3x USB-C 3.2 gen 2 ports, 10G ethernet port and 2x QSFP ports.&lt;/p&gt; &lt;p&gt;The air intake is in the front and exhaust is in the back. It is quiet for the most part, but the fan is quite audible when it's on (but quieter than my GMKTek).&lt;/p&gt; &lt;p&gt;It has a single 4TB PciE 5.0x4 M.2 2242 SSD - SAMSUNG MZALC4T0HBL1-00B07 which I couldn't find anywhere for sale in 2242 form factor, only 2280 version, but DGX Spark only takes 2242 drives. I wish they went with standard 2280 - weird decision, given that it's a mini-PC, not a laptop or tablet. Who cares if the motherboard is an inch longer!&lt;/p&gt; &lt;p&gt;The performance seems good, and gives me 4240.64 MB/sec vs 3118.53 MB/sec on my GMKTek (as measured by hdparm).&lt;/p&gt; &lt;p&gt;It is user replaceable, but there is only one slot, accessible from the bottom of the device. You need to take the magnetic plate off and there are some access screws underneath. &lt;/p&gt; &lt;p&gt;The unit is made of metal, and gets quite hot during high loads, but not unbearable hot like some reviews mentioned. Cools down quickly, though (metal!).&lt;/p&gt; &lt;p&gt;The CPU is 20 core ARM with 10 performance and 10 efficiency cores. I didn't benchmark them, but other reviews CPU show performance similar to Strix Halo.&lt;/p&gt; &lt;h1&gt;Initial Setup&lt;/h1&gt; &lt;p&gt;DGX Spark comes with DGX OS pre-installed (more on this later). You can set it up interactively using keyboard/mouse/display or in headless mode via WiFi hotspot that it creates.&lt;/p&gt; &lt;p&gt;I tried to set it up by connecting my trusted Logitech keyboard/trackpad combo that I use to set up pretty much all my server boxes, but once it booted up, it displayed &amp;quot;Connect the keyboard&amp;quot; message and didn't let me proceed any further. Trackpad portion worked, and volume keys on the keyboard also worked! I rebooted, and was able to enter BIOS (by pressing Esc) just fine, and the keyboard was fully functioning there!&lt;/p&gt; &lt;p&gt;BTW, it has AMI BIOS, but doesn't expose anything interesting other than networking and boot options.&lt;/p&gt; &lt;p&gt;Booting into DGX OS resulted in the same problem. After some googling, I figured that it shipped with a borked kernel that broke Logitech unified setups, so I decided to proceed in a headless mode.&lt;/p&gt; &lt;p&gt;Connected to the Wifi hotspot from my Mac (hotspot SSID/password are printed on a sticker on top of the quick start guide) and was able to continue set up there, which was pretty smooth, other than Mac spamming me with &amp;quot;connect to internet&amp;quot; popup every minute or so. It then proceeded to update firmware and OS packages, which took about 30 minutes, but eventually finished, and after that my Logitech keyboard worked just fine.&lt;/p&gt; &lt;h1&gt;Linux Experience&lt;/h1&gt; &lt;p&gt;DGX Spark runs DGX OS 7.2.3 which is based on Ubuntu 24.04.3 LTS, but uses NVidia's custom kernel, and an older one than mainline Ubuntu LTS uses. So instead of 6.14.x you get 6.11.0-1016-nvidia.&lt;/p&gt; &lt;p&gt;It comes with CUDA 13.0 development kit and NVidia drivers (580.95.05) pre-installed. It also has NVidia's container toolkit that includes docker, and GPU passthrough works well.&lt;/p&gt; &lt;p&gt;Other than that, it's a standard Ubuntu Desktop installation, with GNOME and everything.&lt;/p&gt; &lt;p&gt;SSHd is enabled by default, so after headless install you can connect to it immediately without any extra configuration. &lt;/p&gt; &lt;p&gt;RDP remote desktop doesn't work currently - it connects, but display output is broken.&lt;/p&gt; &lt;p&gt;I tried to boot from Fedora 43 Beta Live USB, and it worked, sort of. First, you need to disable Secure Boot in BIOS. Then, it boots only in &amp;quot;basic graphics mode&amp;quot;, because built-in nvidia drivers don't recognize the chipset. It also throws other errors complaining about chipset, processor cores, etc. &lt;/p&gt; &lt;p&gt;I think I'll try to install it to an external SSD and see if NVidia standard drivers will recognize the chip. There is hope:&lt;/p&gt; &lt;p&gt;============== PLATFORM INFO: ============== IOMMU: Pass-through or enabled Nvidia Driver Info Status: Supported(Nvidia Open Driver Installed) Cuda Driver Version Installed: 13000 Platform: NVIDIA_DGX_Spark, Arch: aarch64(Linux 6.11.0-1016-nvidia) Platform verification succeeded&lt;/p&gt; &lt;p&gt;As for Strix Halo, it's an x86 PC, so you can run any distro you want. I chose Fedora 43 Beta, currently running with kernel 6.17.3-300.fc43.x86_64. Smooth sailing, up-to-date packages.&lt;/p&gt; &lt;h1&gt;Llama.cpp experience&lt;/h1&gt; &lt;h2&gt;DGX Spark&lt;/h2&gt; &lt;p&gt;You need to build it from source as there is no CUDA ARM build, but compiling llama.cpp was very straightforward - CUDA toolkit is already installed, just need to install development tools and it compiles just like on any other system with NVidia GPU. Just follow the instructions, no surprises.&lt;/p&gt; &lt;p&gt;However, when I ran the benchmarks, I ran into two issues.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;The model loading was VERY slow. It took 1 minute 40 seconds to load gpt-oss-120b. For comparison, it takes 22 seconds to load on Strix Halo (both from cold, memory cache flushed).&lt;/li&gt; &lt;li&gt;I wasn't getting the same results as ggerganov in this &lt;a href="https://github.com/ggml-org/llama.cpp/discussions/16578"&gt;thread&lt;/a&gt;. While PP was pretty impressive for such a small system, TG was matching or even slightly worse than my Strix Halo setup with ROCm.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For instance, here are my Strix Halo numbers, compiled with ROCm 7.10.0a20251017, llama.cpp build 03792ad9 (6816), HIP only, no rocWMMA:&lt;/p&gt; &lt;p&gt;&lt;code&gt;bash build/bin/llama-bench -m ~/.cache/llama.cpp/ggml-org_gpt-oss-120b-GGUF_gpt-oss-120b-mxfp4-00001-of-00003.gguf -fa 1 -d 0,4096,8192,16384,32768 -p 2048 -n 32 -ub 2048 &lt;/code&gt;&lt;/p&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;model&lt;/th&gt; &lt;th align="right"&gt; size&lt;/th&gt; &lt;th align="right"&gt; params&lt;/th&gt; &lt;th&gt;backend &lt;/th&gt; &lt;th align="right"&gt; test&lt;/th&gt; &lt;th align="right"&gt; t/s&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; pp2048&lt;/td&gt; &lt;td align="right"&gt; 999.59 ± 4.31&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32&lt;/td&gt; &lt;td align="right"&gt; 47.49 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 824.37 ± 1.16&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 44.23 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 703.42 ± 1.54&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 42.52 ± 0.04&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 514.89 ± 3.86&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 39.71 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 348.59 ± 2.11&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 35.39 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;The same command on Spark gave me this:&lt;/p&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;model &lt;/th&gt; &lt;th align="right"&gt; size&lt;/th&gt; &lt;th align="right"&gt; params&lt;/th&gt; &lt;th&gt;backend &lt;/th&gt; &lt;th align="right"&gt; test&lt;/th&gt; &lt;th align="right"&gt; t/s&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; pp2048&lt;/td&gt; &lt;td align="right"&gt; 1816.00 ± 11.21&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32&lt;/td&gt; &lt;td align="right"&gt; 44.74 ± 0.99&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 1763.75 ± 6.43&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 42.69 ± 0.93&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 1695.29 ± 11.56&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 40.91 ± 0.35&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 1512.65 ± 6.35&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 38.61 ± 0.03&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 1250.55 ± 5.21&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 34.66 ± 0.02&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;I tried enabling Unified Memory switch (GGML_CUDA_ENABLE_UNIFIED_MEMORY=1) - it improved model loading, but resulted in even worse performance.&lt;/p&gt; &lt;p&gt;I reached out to ggerganov, and he suggested disabling mmap. I thought I tried it, but apparently not. Well, that fixed it. Model loading improved too - now taking 56 seconds from cold and 23 seconds when it's still in cache.&lt;/p&gt; &lt;p&gt;Updated numbers:&lt;/p&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;model&lt;/th&gt; &lt;th align="right"&gt; size&lt;/th&gt; &lt;th align="right"&gt; params&lt;/th&gt; &lt;th&gt;backend&lt;/th&gt; &lt;th align="right"&gt; test&lt;/th&gt; &lt;th align="right"&gt; t/s&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; pp2048&lt;/td&gt; &lt;td align="right"&gt; 1939.32 ± 4.03&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32&lt;/td&gt; &lt;td align="right"&gt; 56.33 ± 0.26&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 1832.04 ± 5.58&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 52.63 ± 0.12&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 1738.07 ± 5.93&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 48.60 ± 0.20&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 1525.71 ± 12.34&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 45.01 ± 0.09&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 1242.35 ± 5.64&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;CUDA &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 39.10 ± 0.09&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;As you can see, much better performance both in PP and TG. &lt;/p&gt; &lt;p&gt;As for Strix Halo, mmap/no-mmap doesn't make any difference there.&lt;/p&gt; &lt;h2&gt;Strix Halo&lt;/h2&gt; &lt;p&gt;On Strix Halo, llama.cpp experience is... well, a bit turbulent. &lt;/p&gt; &lt;p&gt;You can download a pre-built version for Vulkan, and it works, but the performance is a mixed bag. TG is pretty good, but PP is not great.&lt;/p&gt; &lt;p&gt;&lt;code&gt;bash build/bin/llama-bench -m ~/.cache/llama.cpp/ggml-org_gpt-oss-120b-GGUF_gpt-oss-120b-mxfp4-00001-of-00003.gguf -fa 1 -d 0,4096,8192,16384,32768 -p 2048 -n 32 --mmap 0 -ngl 999 -ub 1024 &lt;/code&gt; &lt;strong&gt;NOTE&lt;/strong&gt;: Vulkan likes batch size of 1024 the most, unlike ROCm that likes 2048 better.&lt;/p&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;model &lt;/th&gt; &lt;th align="right"&gt; size&lt;/th&gt; &lt;th align="right"&gt; params&lt;/th&gt; &lt;th&gt;backend &lt;/th&gt; &lt;th align="right"&gt; test&lt;/th&gt; &lt;th align="right"&gt;t/s&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt; pp2048&lt;/td&gt; &lt;td align="right"&gt; 526.54 ± 4.90&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt; tg32&lt;/td&gt; &lt;td align="right"&gt; 52.64 ± 0.08&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 438.85 ± 0.76&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 48.21 ± 0.03&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 356.28 ± 4.47&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 45.90 ± 0.23&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 210.17 ± 2.53&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 42.64 ± 0.07&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 138.79 ± 9.47&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;Vulkan &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 36.18 ± 0.02&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;I tried toolboxes from kyuz0, and some of them were better, but I still felt that I could squeeze more juice out of it. All of them suffered from significant performance degradation when the context was filling up.&lt;/p&gt; &lt;p&gt;Then I tried to compile my own using the latest ROCm &lt;a href="https://therock-nightly-tarball.s3.amazonaws.com/therock-dist-linux-gfx1151-7.10.0a20251017.tar.gz"&gt;build&lt;/a&gt; from TheRock (on that date).&lt;/p&gt; &lt;p&gt;I also build &lt;a href="https://github.com/ROCm/rocWMMA.git"&gt;rocWMMA&lt;/a&gt; as recommended by kyoz0 (more on that later).&lt;/p&gt; &lt;p&gt;Llama.cpp compiled without major issues - I had to configure the paths properly, but other than that, it just worked. The PP increased dramatically, but TG decreased.&lt;/p&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;model &lt;/th&gt; &lt;th align="right"&gt; size&lt;/th&gt; &lt;th align="right"&gt; params&lt;/th&gt; &lt;th&gt;backend &lt;/th&gt; &lt;th align="right"&gt;ngl&lt;/th&gt; &lt;th align="right"&gt;n_ubatch&lt;/th&gt; &lt;th align="right"&gt;fa&lt;/th&gt; &lt;th align="right"&gt;mmap&lt;/th&gt; &lt;th align="right"&gt; test&lt;/th&gt; &lt;th align="right"&gt; t/s&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt; pp2048&lt;/td&gt; &lt;td align="right"&gt; 1030.71 ± 2.26&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt; tg32&lt;/td&gt; &lt;td align="right"&gt; 47.84 ± 0.02&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 802.36 ± 6.96&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt; tg32 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 39.09 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 615.27 ± 2.18&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt; tg32 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 33.34 ± 0.05&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 409.25 ± 0.67&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt; tg32 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 25.86 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 228.04 ± 0.44&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;999&lt;/td&gt; &lt;td align="right"&gt; 2048&lt;/td&gt; &lt;td align="right"&gt; 1&lt;/td&gt; &lt;td align="right"&gt; 0&lt;/td&gt; &lt;td align="right"&gt; tg32 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 18.07 ± 0.03&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;But the biggest issue is significant performance degradation with long context, much more than you'd expect.&lt;/p&gt; &lt;p&gt;Then I stumbled upon Lemonade SDK and their pre-built llama.cpp. Ran that one, and got much better results across the board. TG was still below Vulkan, but PP was decent and degradation wasn't as bad:&lt;/p&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;model&lt;/th&gt; &lt;th align="right"&gt;size&lt;/th&gt; &lt;th align="right"&gt;params&lt;/th&gt; &lt;th align="right"&gt;test&lt;/th&gt; &lt;th align="right"&gt;t/s&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;pp2048&lt;/td&gt; &lt;td align="right"&gt;999.20 ± 3.44&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;tg32&lt;/td&gt; &lt;td align="right"&gt;47.53 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d4096&lt;/td&gt; &lt;td align="right"&gt;826.63 ± 9.09&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;tg32 @ d4096&lt;/td&gt; &lt;td align="right"&gt;44.24 ± 0.03&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d8192&lt;/td&gt; &lt;td align="right"&gt;702.66 ± 2.15&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;tg32 @ d8192&lt;/td&gt; &lt;td align="right"&gt;42.56 ± 0.03&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d16384&lt;/td&gt; &lt;td align="right"&gt;505.85 ± 1.33&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;tg32 @ d16384&lt;/td&gt; &lt;td align="right"&gt;39.82 ± 0.03&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d32768&lt;/td&gt; &lt;td align="right"&gt;343.06 ± 2.07&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE&lt;/td&gt; &lt;td align="right"&gt;59.02 GiB&lt;/td&gt; &lt;td align="right"&gt;116.83 B&lt;/td&gt; &lt;td align="right"&gt;tg32 @ d32768&lt;/td&gt; &lt;td align="right"&gt;35.50 ± 0.02&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;So I looked at their compilation options and noticed that they build without rocWMMA. So, I did the same and got similar performance too!&lt;/p&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th&gt;model &lt;/th&gt; &lt;th align="right"&gt; size&lt;/th&gt; &lt;th align="right"&gt; params&lt;/th&gt; &lt;th&gt;backend&lt;/th&gt; &lt;th align="right"&gt; test&lt;/th&gt; &lt;th align="right"&gt; t/s&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; pp2048&lt;/td&gt; &lt;td align="right"&gt; 1000.93 ± 1.23&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32&lt;/td&gt; &lt;td align="right"&gt; 47.46 ± 0.02&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 827.34 ± 1.99&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d4096&lt;/td&gt; &lt;td align="right"&gt; 44.20 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; pp2048 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 701.68 ± 2.36&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d8192&lt;/td&gt; &lt;td align="right"&gt; 42.39 ± 0.04&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 503.49 ± 0.90&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d16384&lt;/td&gt; &lt;td align="right"&gt; 39.61 ± 0.02&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt;pp2048 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 344.36 ± 0.80&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;gpt-oss 120B MXFP4 MoE &lt;/td&gt; &lt;td align="right"&gt; 59.02 GiB&lt;/td&gt; &lt;td align="right"&gt; 116.83 B&lt;/td&gt; &lt;td&gt;ROCm &lt;/td&gt; &lt;td align="right"&gt; tg32 @ d32768&lt;/td&gt; &lt;td align="right"&gt; 35.32 ± 0.01&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;So far that's the best I could get from Strix Halo. It's very usable for text generation tasks.&lt;/p&gt; &lt;p&gt;Also, wanted to touch multi-modal performance. That's where Spark shines. I don't have any specific benchmarks yet, but image processing is much faster on Spark than on Strix Halo, especially in vLLM.&lt;/p&gt; &lt;h1&gt;VLLM Experience&lt;/h1&gt; &lt;p&gt;Haven't had a chance to do extensive testing here, but wanted to share some early thoughts.&lt;/p&gt; &lt;h2&gt;DGX Spark&lt;/h2&gt; &lt;p&gt;First, I tried to just build vLLM from the source as usual. The build was successful, but it failed with the following error: ptxas fatal : Value 'sm_121a' is not defined for option 'gpu-name'&lt;/p&gt; &lt;p&gt;I decided not to spend too much time on this for now, and just launched vLLM container that NVidia provides through their Docker repository. It is built for DGX Spark, so supports it out of the box.&lt;/p&gt; &lt;p&gt;However, it has version 0.10.1, so I wasn't able to run Qwen3-VL there.&lt;/p&gt; &lt;p&gt;Now, they put the source code inside the container, but it wasn't a git repository - probably contains some NVidia-specific patches - I'll need to see if those could be merged into main vllm code.&lt;/p&gt; &lt;p&gt;So I just checked out vllm main branch and proceeded to build with existing pytorch as usual. This time I was able to run it and launch qwen3-vl models just fine. Both dense and MOE work. I tried FP4 and AWQ quants - everything works, no need to disable CUDA graphs.&lt;/p&gt; &lt;p&gt;The performance is decent - I still need to run some benchmarks, but image processing is very fast.&lt;/p&gt; &lt;h2&gt;Strix Halo&lt;/h2&gt; &lt;p&gt;Unlike llama.cpp that just works, vLLM experience on Strix Halo is much more limited.&lt;/p&gt; &lt;p&gt;My goal was to run Qwen3-VL models that are not supported by llama.cpp yet, so I needed to build 0.11.0 or later. There are some existing containers/toolboxes for earlier versions, but I couldn't use them.&lt;/p&gt; &lt;p&gt;So, I installed ROCm pyTorch libraries from TheRock, some &lt;a href="https://github.com/kyuz0/amd-strix-halo-vllm-toolboxes/blob/main/Dockerfile.vllm-therock-gfx1151-aotriton"&gt;patches&lt;/a&gt; from kyoz0 toolboxes to avoid amdsmi package crash, &lt;a href="https://github.com/ROCm/flash-attention.git"&gt;ROCm FlashAttention&lt;/a&gt; and then just followed vLLM standard installation instructions with existing pyTorch.&lt;/p&gt; &lt;p&gt;I was able to run Qwen3VL dense models with decent (for dense models) speeds, although initialization takes quite some time until you reduce -max-num-seqs to 1 and set tp 1. The image processing is very slow though, much slower than llama.cpp for the same image, but the token generation is about what you'd expect from it.&lt;/p&gt; &lt;p&gt;Again, model loading is faster than Spark for some reason (I'd expect other way around given faster SSD in Spark and slightly faster memory).&lt;/p&gt; &lt;p&gt;I'm going to rebuild vLLM and re-test/benchmark later.&lt;/p&gt; &lt;p&gt;Some observations: - FP8 models don't work - they hang on WARNING 10-22 12:55:04 [fp8_utils.py:785] Using default W8A8 Block FP8 kernel config. Performance might be sub-optimal! Config file not found at /home/eugr/vllm/vllm/vllm/model_executor/layers/quantization/utils/configs/N=6144,K=2560,device_name=Radeon_8060S_Graphics,dtype=fp8_w8a8,block_shape=[128,128].json - You need to use --enforce-eager, as CUDA graphs crash vLLM. Sometimes it works, but mostly crashes. - Even with --enforce-eager, there are some HIP-related crashes here and there occasionally. - AWQ models work, both 4-bit and 8-bit, but only dense ones. AWQ MOE quants require Marlin kernel that is not available for ROCm.&lt;/p&gt; &lt;h1&gt;Conclusion / TL;DR&lt;/h1&gt; &lt;p&gt;Summary of my initial impressions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;DGX Spark is an interesting beast for sure. &lt;ul&gt; &lt;li&gt;Limited extensibility - no USB-4, only one M.2 slot, and it's 2242.&lt;/li&gt; &lt;li&gt;But has 200Gbps network interface.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;It's a first generation of such devices, so there are some annoying bugs and incompatibilities.&lt;/li&gt; &lt;li&gt;Inference wise, the token generation is nearly identical to Strix Halo both in llama.cpp and vllm, but prompt processing is 2-5x higher than Strix Halo. &lt;ul&gt; &lt;li&gt;Strix Halo performance in prompt processing degrades much faster with context.&lt;/li&gt; &lt;li&gt;Image processing takes longer, especially with vLLM.&lt;/li&gt; &lt;li&gt;Model loading into unified RAM is slower on DGX Spark for some reason, both in llama.cpp and vLLM.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;Even though vLLM included gfx1151 in the supported configurations, it still requires some hacks to compile it. &lt;ul&gt; &lt;li&gt;And even then, the experience is suboptimal. Initialization time is slow, it crashes, FP8 doesn't work, AWQ for MOE doesn't work.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;If you are an AI developer who uses transformers/pyTorch or you need vLLM - you are better off with DGX Spark (or just a normal GPU build).&lt;/li&gt; &lt;li&gt;If you want a power-efficient inference server that can run gpt-oss and similar MOE at decent speeds, and don't need to process images often, Strix Halo is the way to go.&lt;/li&gt; &lt;li&gt;If you want a general purpose machine, Strix Halo wins too.&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Eugr"&gt; /u/Eugr &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odk11r/strix_halo_vs_dgx_spark_initial_impressions_long/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odk11r/strix_halo_vs_dgx_spark_initial_impressions_long/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odk11r/strix_halo_vs_dgx_spark_initial_impressions_long/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T20:46:12+00:00</published>
  </entry>
  <entry>
    <id>t3_1odi1c0</id>
    <title>Meta lays off 600 employees within AI unit</title>
    <updated>2025-10-22T19:30:58+00:00</updated>
    <author>
      <name>/u/a_slay_nub</name>
      <uri>https://old.reddit.com/user/a_slay_nub</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odi1c0/meta_lays_off_600_employees_within_ai_unit/"&gt; &lt;img alt="Meta lays off 600 employees within AI unit" src="https://external-preview.redd.it/J07EauFcN4nV9LOcRS0eXwdDIcxd3OiFJdlO3Bhl-Rc.jpeg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=b63bb44a8b15efeaf11cd6f80af319b8caa01688" title="Meta lays off 600 employees within AI unit" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/a_slay_nub"&gt; /u/a_slay_nub &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://www.cnbc.com/2025/10/22/meta-layoffs-ai.html"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odi1c0/meta_lays_off_600_employees_within_ai_unit/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odi1c0/meta_lays_off_600_employees_within_ai_unit/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T19:30:58+00:00</published>
  </entry>
  <entry>
    <id>t3_1odx0d4</id>
    <title>Llama.cpp is looking for M5 Neural Accelerator performance testers</title>
    <updated>2025-10-23T07:34:54+00:00</updated>
    <author>
      <name>/u/auradragon1</name>
      <uri>https://old.reddit.com/user/auradragon1</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odx0d4/llamacpp_is_looking_for_m5_neural_accelerator/"&gt; &lt;img alt="Llama.cpp is looking for M5 Neural Accelerator performance testers" src="https://external-preview.redd.it/nAPkKB3AZyBbBnQ2EaOzbhk_HVxsulN95BhKMutB8lk.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=5cdeb2d71479faa99d95242c1a9a704128731920" title="Llama.cpp is looking for M5 Neural Accelerator performance testers" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/auradragon1"&gt; /u/auradragon1 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/ggml-org/llama.cpp/pull/16634"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odx0d4/llamacpp_is_looking_for_m5_neural_accelerator/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odx0d4/llamacpp_is_looking_for_m5_neural_accelerator/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T07:34:54+00:00</published>
  </entry>
  <entry>
    <id>t3_1oda8mk</id>
    <title>Qwen team is helping llama.cpp again</title>
    <updated>2025-10-22T14:44:44+00:00</updated>
    <author>
      <name>/u/jacek2023</name>
      <uri>https://old.reddit.com/user/jacek2023</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oda8mk/qwen_team_is_helping_llamacpp_again/"&gt; &lt;img alt="Qwen team is helping llama.cpp again" src="https://preview.redd.it/dh1iaky2eowf1.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=addcf456730d4f5ec04b561980fa9d74dfb18d96" title="Qwen team is helping llama.cpp again" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/jacek2023"&gt; /u/jacek2023 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/dh1iaky2eowf1.png"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oda8mk/qwen_team_is_helping_llamacpp_again/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1oda8mk/qwen_team_is_helping_llamacpp_again/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-22T14:44:44+00:00</published>
  </entry>
  <entry>
    <id>t3_1odxyb6</id>
    <title>Un-LOCC (Universal Lossy Optical Context Compression), Achieve Up To 3× context compression with 93.65% Accuracy.</title>
    <updated>2025-10-23T08:37:48+00:00</updated>
    <author>
      <name>/u/MaxDev0</name>
      <uri>https://old.reddit.com/user/MaxDev0</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odxyb6/unlocc_universal_lossy_optical_context/"&gt; &lt;img alt="Un-LOCC (Universal Lossy Optical Context Compression), Achieve Up To 3× context compression with 93.65% Accuracy." src="https://preview.redd.it/it5cpntkptwf1.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=64ac961c643c153addf2fd53394331fd81a50f29" title="Un-LOCC (Universal Lossy Optical Context Compression), Achieve Up To 3× context compression with 93.65% Accuracy." /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: I compress LLM context into &lt;strong&gt;images&lt;/strong&gt; instead of text, and let a &lt;strong&gt;vision-language model&lt;/strong&gt; (VLM) “decompress” it by reading the image. In my tests, this yields up to &lt;strong&gt;~2.8:1 token compression at 93.65% accuracy&lt;/strong&gt; on &lt;em&gt;Gemini 2.5-Flash-Lite (Exp 56)&lt;/em&gt;, and &lt;strong&gt;99.26% at 1.7:1&lt;/strong&gt; on &lt;em&gt;Qwen2.5-VL-72B-Instruct (Exp 34)&lt;/em&gt;. Full code, experiments, and replication steps are open-source.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Repo (please ⭐ if useful):&lt;/strong&gt; &lt;a href="https://github.com/MaxDevv/Un-LOCC"&gt;https://github.com/MaxDevv/Un-LOCC&lt;/a&gt;&lt;/p&gt; &lt;h1&gt;What this is:&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;Un-LOCC (Universal Lossy Optical Context Compression)&lt;/strong&gt;: a simple, general method to &lt;strong&gt;encode long text context into compact images&lt;/strong&gt;, then &lt;strong&gt;decode with a VLM&lt;/strong&gt;. Think of the VLM as an OCR-plus semantic decompressor.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;I render text into a fixed-size PNG (e.g., &lt;strong&gt;324×324&lt;/strong&gt;, Atkinson Hyperlegible ~&lt;strong&gt;13px&lt;/strong&gt;), pass that image to a VLM, and ask it to reproduce the original text.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Accuracy&lt;/strong&gt; = normalized Levenshtein similarity (%).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Compression ratio&lt;/strong&gt; = &lt;em&gt;text tokens ÷ image tokens&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;Key results (linked to experiments in the repo):&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Gemini 2.5-Flash-Lite&lt;/strong&gt;: &lt;strong&gt;100% @ 1.3:1&lt;/strong&gt; &lt;em&gt;(Exp 46)&lt;/em&gt; and &lt;strong&gt;~93.65% @ 2.8:1&lt;/strong&gt; &lt;em&gt;(Exp 56)&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Qwen2.5-VL-72B-Instruct&lt;/strong&gt;: &lt;strong&gt;99.26% @ 1.7:1&lt;/strong&gt; &lt;em&gt;(Exp 34)&lt;/em&gt;; &lt;strong&gt;~75.56% @ 2.3:1&lt;/strong&gt; &lt;em&gt;(Exp 41)&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Qwen3-VL-235B-a22b-Instruct&lt;/strong&gt;: &lt;strong&gt;95.24% @ 2.2:1&lt;/strong&gt; &lt;em&gt;(Exp 50)&lt;/em&gt;; &lt;strong&gt;~82.22% @ 2.8:1&lt;/strong&gt; &lt;em&gt;(Exp 90)&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Phi-4-Multimodal&lt;/strong&gt;: &lt;strong&gt;94.44% @ 1.1:1&lt;/strong&gt; &lt;em&gt;(Exps 59, 85)&lt;/em&gt;; &lt;strong&gt;~73.55% @ 2.3:1&lt;/strong&gt; &lt;em&gt;(Exp 61)&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;UI-TARS-1.5-7B&lt;/strong&gt;: &lt;strong&gt;95.24% @ 1.7:1&lt;/strong&gt; &lt;em&gt;(Exp 72)&lt;/em&gt;; &lt;strong&gt;~79.71% @ 1.7:1&lt;/strong&gt; &lt;em&gt;(Exp 88)&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;LLaMA-4-Scout&lt;/strong&gt;: &lt;strong&gt;86.57% @ 1.3:1&lt;/strong&gt; &lt;em&gt;(Exp 53)&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt; &lt;p&gt;Details, prompts, fonts, and measurement code are in the README. I cite each claim with &lt;strong&gt;(Exp XX)&lt;/strong&gt; so you can verify quickly.&lt;/p&gt; &lt;/blockquote&gt; &lt;h1&gt;Why this matters:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Cheaper context&lt;/strong&gt;: replace expensive text tokens with “image tokens” when a capable VLM sits in the loop.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Architecturally simple&lt;/strong&gt;: no model modifications are needed, you can use rendering + a VLM you already have.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Composable&lt;/strong&gt;: combine with retrieval, chunking, or multimodal workflows.&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;What I need help with:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Generalization&lt;/strong&gt;: different fonts, colors, and resolutions.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Model coverage&lt;/strong&gt;: more open VLMs; local runs welcome.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Edge cases&lt;/strong&gt;: math, code blocks, long tables, multilingual.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Repro/PRs&lt;/strong&gt;: if you get better ratios or accuracy, please open an issue/PR.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Repo again (and yes, stars genuinely help discoverability):&lt;/strong&gt; &lt;a href="https://github.com/MaxDevv/Un-LOCC"&gt;https://github.com/MaxDevv/Un-LOCC&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/MaxDev0"&gt; /u/MaxDev0 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/it5cpntkptwf1.png"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odxyb6/unlocc_universal_lossy_optical_context/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odxyb6/unlocc_universal_lossy_optical_context/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T08:37:48+00:00</published>
  </entry>
  <entry>
    <id>t3_1oe0y11</id>
    <title>I found a perfect coder model for my RTX4090+64GB RAM</title>
    <updated>2025-10-23T11:39:15+00:00</updated>
    <author>
      <name>/u/srigi</name>
      <uri>https://old.reddit.com/user/srigi</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Disappointed with vanilla Qwen3-coder-30B-A3B, I browsed models at mradermacher. I had a good experience with YOYO models in the past. I stumbled upon &lt;strong&gt;mradermacher/Qwen3-Yoyo-V3-42B-A3B-Thinking-TOTAL-RECALL-ST-TNG-III-i1-GGUF&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;First, I was a little worried that &lt;strong&gt;42B&lt;/strong&gt; won't fit, and offloading MoEs to CPU will result in poor perf. But thankfully, I was wrong.&lt;/p&gt; &lt;p&gt;Somehow this model consumed only about 8GB with &lt;code&gt;--cpu-moe&lt;/code&gt; (keep all Mixture of Experts weights on the CPU) and Q4_K_M, and 32k ctx. So I tuned llama.cpp invocation to fully occupy 24GB of RTX 4090 and put the rest into the CPU/RAM:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;llama-server --model Qwen3-Yoyo-V3-42B-A3B-Thinking-TOTAL-RECALL-ST-TNG-III.i1-Q4_K_M.gguf \ --ctx-size 102400 \ --flash-attn on \ --jinja \ --cache-type-k q8_0 \ --cache-type-v q8_0 \ --batch-size 1024 \ --ubatch-size 512 \ --n-cpu-moe 28 \ --n-gpu-layers 99 \ --repeat-last-n 192 \ --repeat-penalty 1.05 \ --threads 16 \ --host 0.0.0.0 \ --port 8080 \ --api-key secret &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With these settings, it eats 23400MB of VRAM and 30GB of RAM. It processes the RooCode's system prompt (around 16k tokens) in around 10s and generates at 44tk/s. With 100k context window.&lt;/p&gt; &lt;p&gt;And the best thing - the RooCode tool-calling is very reliable (vanilla Qwen3-coder failed at this horribly). This model can really code and is fast on a single RTX 4090!&lt;/p&gt; &lt;p&gt;Here is a 1 minute demo of adding a small code-change to medium sized &lt;a href="https://github.com/srigi/type-graphql"&gt;code-base&lt;/a&gt;: &lt;a href="https://i.postimg.cc/cHp8sP9m/Screen-Flow.gif"&gt;https://i.postimg.cc/cHp8sP9m/Screen-Flow.gif&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/srigi"&gt; /u/srigi &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe0y11/i_found_a_perfect_coder_model_for_my_rtx409064gb/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe0y11/i_found_a_perfect_coder_model_for_my_rtx409064gb/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1oe0y11/i_found_a_perfect_coder_model_for_my_rtx409064gb/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T11:39:15+00:00</published>
  </entry>
  <entry>
    <id>t3_1odzuos</id>
    <title>ByteDance new release: Video-As-Prompt</title>
    <updated>2025-10-23T10:37:35+00:00</updated>
    <author>
      <name>/u/edward-dev</name>
      <uri>https://old.reddit.com/user/edward-dev</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odzuos/bytedance_new_release_videoasprompt/"&gt; &lt;img alt="ByteDance new release: Video-As-Prompt" src="https://external-preview.redd.it/NmtjemdueXlhdXdmMYm3iTnseSQvWv7pLtSTSL9kyuPriWa9dnRnXyWhtUoO.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=6d57110b1dddf99fa2c1932f5645e1206f259411" title="ByteDance new release: Video-As-Prompt" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Video-As-Prompt-Wan2.1-14B : &lt;a href="https://huggingface.co/ByteDance/Video-As-Prompt-Wan2.1-14B"&gt;HuggingFace link&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Video-As-Prompt-CogVideoX-5B : &lt;a href="https://huggingface.co/ByteDance/Video-As-Prompt-CogVideoX-5B"&gt;HuggingFace link&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Video-As-Prompt Core idea: Given a reference video with wanted semantics as a video prompt, Video-As-Prompt animate a reference image with the same semantics as the reference video. &lt;/p&gt; &lt;p&gt;Video-As-Prompt provides two variants, each with distinct trade-offs:&lt;/p&gt; &lt;p&gt;CogVideoX-I2V-5B Strengths: Fewer backbone parameters let us train more steps under limited resources, yielding strong stability on most semantic conditions. Limitations: Due to backbone ability limitation, it is weaker on human-centric generation and on concepts underrepresented in pretraining (e.g., ladudu, Squid Game, Minecraft).&lt;/p&gt; &lt;p&gt;Wan2.1-I2V-14B Strengths: Strong performance on human actions and novel concepts, thanks to a more capable base model. Limitations: Larger model size reduced feasible training steps given our resources, lowering stability on some semantic conditions.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/edward-dev"&gt; /u/edward-dev &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://v.redd.it/rkbtr0wyauwf1"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odzuos/bytedance_new_release_videoasprompt/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odzuos/bytedance_new_release_videoasprompt/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T10:37:35+00:00</published>
  </entry>
  <entry>
    <id>t3_1oe13rg</id>
    <title>Qwen3 outperforming bigger LLMs at trading</title>
    <updated>2025-10-23T11:47:37+00:00</updated>
    <author>
      <name>/u/Christosconst</name>
      <uri>https://old.reddit.com/user/Christosconst</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe13rg/qwen3_outperforming_bigger_llms_at_trading/"&gt; &lt;img alt="Qwen3 outperforming bigger LLMs at trading" src="https://preview.redd.it/7i46ukqanuwf1.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=2af3d3871761418ac44fa8e43516acb99b51653d" title="Qwen3 outperforming bigger LLMs at trading" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Christosconst"&gt; /u/Christosconst &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/7i46ukqanuwf1.png"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1oe13rg/qwen3_outperforming_bigger_llms_at_trading/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1oe13rg/qwen3_outperforming_bigger_llms_at_trading/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T11:47:37+00:00</published>
  </entry>
  <entry>
    <id>t3_1odv090</id>
    <title>I built 50+ RAGs in 2 years. Here are the architectures that get products out the door!</title>
    <updated>2025-10-23T05:27:40+00:00</updated>
    <author>
      <name>/u/jremynse</name>
      <uri>https://old.reddit.com/user/jremynse</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I have been ML engineering for different startups in both in Europe and in the US and I can tell you... the gap between a RAG demo and a RAG product is almost always the same: people are still using naive retrieval.&lt;/p&gt; &lt;p&gt;Let's be clear: if you actually want to ship a product that works, you must move beyond the basic &lt;code&gt;sim(BiEncoder(q), BiEncoder(d))&lt;/code&gt; setup. It fails on precision, nuance, and complex queries.&lt;/p&gt; &lt;p&gt;Your architecture must solve a specific problem. Here is a technical summary of three advanced patterns.&lt;/p&gt; &lt;h1&gt;Notation Key&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;q, d&lt;/code&gt;: Query, Document&lt;/li&gt; &lt;li&gt;&lt;code&gt;BiEncoder(x)&lt;/code&gt;: Bi-encoder model (e.g., SBERT), computes v independently.&lt;/li&gt; &lt;li&gt;&lt;code&gt;CrossEncoder(q, d)&lt;/code&gt;: Cross-encoder model, computes a joint relevance score.&lt;/li&gt; &lt;li&gt;&lt;code&gt;sim(v1, v2)&lt;/code&gt;: Cosine similarity.&lt;/li&gt; &lt;li&gt;&lt;code&gt;S_naive&lt;/code&gt; = sim(BiEncoder(q), BiEncoder(d))&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;1. The Retriever-Reranker (The Precision Stack)&lt;/h1&gt; &lt;p&gt;This is the most reliable path to production accuracy. It decouples the recall problem from the precision problem.&lt;/p&gt; &lt;p&gt;How it works:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Stage 1 (Retriever):&lt;/strong&gt; Get Top-K candidates using a fast, high-recall hybrid search (RRF).&lt;/p&gt; &lt;p&gt;&lt;code&gt;RRF_Score(d) = SUM( 1 / (k + rank_r(d)) ) for r in {bm25, vector}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Stage 2 (Reranker):&lt;/strong&gt; Re-score only the Top-K with the slower, more accurate CrossEncoder(q, d).&lt;/p&gt; &lt;p&gt;Pros: This is the correct way to solve precision. The &lt;code&gt;CrossEncoder(q, d)&lt;/code&gt; is fundamentally more powerful than &lt;code&gt;S_naive&lt;/code&gt; and is the only reliable method to handle negation and nuance.&lt;/p&gt; &lt;p&gt;Cons: The latency of a second network call is a minor, predictable cost for the massive gain in accuracy.&lt;/p&gt; &lt;p&gt;There is a nice implementation of this with &lt;strong&gt;Turbopuffer&lt;/strong&gt; and &lt;strong&gt;ZeroEntropy.&lt;/strong&gt;&lt;br /&gt; (btw this has given me the best results so far but you can find different variations)&lt;/p&gt; &lt;h1&gt;2. The Query Transformer (The Recall Stack)&lt;/h1&gt; &lt;p&gt;This pattern assumes the query &lt;code&gt;q&lt;/code&gt; is the problem. It uses an LLM to refine q before retrieval.&lt;/p&gt; &lt;p&gt;How it works: An LLM generates n query variants &lt;code&gt;{q_1, ..., q_n}&lt;/code&gt; (Multi-Query) or a hypothetical document &lt;code&gt;d_hypo&lt;/code&gt; (HyDE) to search against.&lt;/p&gt; &lt;p&gt;&lt;code&gt;Search Vector = BiEncoder(d_hypo)&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Pros: Fixes bad recall from vague or semantically mismatched user input.&lt;/p&gt; &lt;p&gt;Cons: Adds a costly and slow LLM call before the search has even begun.&lt;/p&gt; &lt;h1&gt;3. The Graph RAG (The Connections Stack)&lt;/h1&gt; &lt;p&gt;A different paradigm focused on explicit, structured relationships.&lt;/p&gt; &lt;p&gt;How it works: Abandons vector similarity for a graph query language.&lt;/p&gt; &lt;p&gt;&lt;code&gt;MATCH (e:Engineer)-[:WORKS_AT]-&amp;gt;(c:Company) RETURN e .name&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Pros: Can answer complex, multi-hop questions that vector search fundamentally cannot.&lt;/p&gt; &lt;p&gt;Cons: This is often a distraction. It requires a massive, upfront data-modeling bottleneck (ETL, schema definition). It is rigid, expensive, and defeats the primary purpose of RAG, which is to work with unstructured data.&lt;/p&gt; &lt;h1&gt;TLDR&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;Setup 1 (Retriever-Reranker)&lt;/strong&gt; is the production standard for fixing precision.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Setup 2 (Query-Transformer)&lt;/strong&gt; is a-costly-way to fix bad user queries.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Setup 3 (Graph RAG)&lt;/strong&gt; solves a different problem (structured data) and is mostly a distraction.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/jremynse"&gt; /u/jremynse &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odv090/i_built_50_rags_in_2_years_here_are_the/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1odv090/i_built_50_rags_in_2_years_here_are_the/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1odv090/i_built_50_rags_in_2_years_here_are_the/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-23T05:27:40+00:00</published>
  </entry>
  <entry>
    <id>t3_1mpk2va</id>
    <title>Announcing LocalLlama discord server &amp; bot!</title>
    <updated>2025-08-13T23:21:05+00:00</updated>
    <author>
      <name>/u/HOLUPREDICTIONS</name>
      <uri>https://old.reddit.com/user/HOLUPREDICTIONS</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1mpk2va/announcing_localllama_discord_server_bot/"&gt; &lt;img alt="Announcing LocalLlama discord server &amp;amp; bot!" src="https://b.thumbs.redditmedia.com/QBscWhXGvo8sy9oNNt-7et1ByOGRWY1UckDAudAWACM.jpg" title="Announcing LocalLlama discord server &amp;amp; bot!" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;INVITE: &lt;a href="https://discord.gg/rC922KfEwj"&gt;https://discord.gg/rC922KfEwj&lt;/a&gt;&lt;/p&gt; &lt;p&gt;There used to be one old discord server for the subreddit but it was deleted by the previous mod.&lt;/p&gt; &lt;p&gt;Why? The subreddit has grown to 500k users - inevitably, some users like a niche community with more technical discussion and fewer memes (even if relevant).&lt;/p&gt; &lt;p&gt;We have a discord bot to test out open source models.&lt;/p&gt; &lt;p&gt;Better contest and events organization.&lt;/p&gt; &lt;p&gt;Best for quick questions or showcasing your rig!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/HOLUPREDICTIONS"&gt; /u/HOLUPREDICTIONS &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/gallery/1mpk2va"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1mpk2va/announcing_localllama_discord_server_bot/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1mpk2va/announcing_localllama_discord_server_bot/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-08-13T23:21:05+00:00</published>
  </entry>
  <entry>
    <id>t3_1obqkpe</id>
    <title>Best Local LLMs - October 2025</title>
    <updated>2025-10-20T19:06:06+00:00</updated>
    <author>
      <name>/u/rm-rf-rm</name>
      <uri>https://old.reddit.com/user/rm-rf-rm</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Welcome to the first monthly &amp;quot;Best Local LLMs&amp;quot; post!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Share what your favorite models are right now &lt;strong&gt;and why.&lt;/strong&gt; Given the nature of the beast in evaluating LLMs (untrustworthiness of benchmarks, immature tooling, intrinsic stochasticity), please be as detailed as possible in describing your setup, nature of your usage (how much, personal/professional use), tools/frameworks/prompts etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Should be open weights models&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Applications&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;General&lt;/li&gt; &lt;li&gt;Agentic/Tool Use&lt;/li&gt; &lt;li&gt;Coding&lt;/li&gt; &lt;li&gt;Creative Writing/RP&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;(look for the top level comments for each Application and please thread your responses under that)&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/rm-rf-rm"&gt; /u/rm-rf-rm &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1obqkpe/best_local_llms_october_2025/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1obqkpe/best_local_llms_october_2025/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1obqkpe/best_local_llms_october_2025/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-10-20T19:06:06+00:00</published>
  </entry>
</feed>
